apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-mongo-server
spec:
  replicas: 1
  selector:
    matchLabels: # define las etiquetas que el Deployment usará para identificar los Pods que administra.
      app: db-mongo-server # El Deployment buscará Pods con esta etiqueta.
  template: # plantilla del POD - aqui se configura el POD
    metadata:
      labels: # define las etiquetas que tendrán los Pods creados por el Deployment.
        app: db-mongo-server # Etiqueta asignada a los Pods creados por este template.
    spec: # Define las especificaciones generales para los Pods gestionados por este Deployment.
      containers:
      - name: mongo-server
        image: mongo:latest
        ports:
        - containerPort: 27017 # Puerto interno del contenedor
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "secret"
        volumeMounts: # Volúmenes para datos persistentes y scripts de inicialización (usara los volumenes definidos en "volumes")
        - name: mongo-data # Montaje del volumen hostPath para datos de mongo
          mountPath: /data/db # Proporciona un volumen persistente para los datos de la base de datos, asegurando que no se pierdan entre reinicios.
        # - name: init-script
        #   mountPath: /docker-entrypoint-initdb.d/mongo-init.js  # Aquí se monta el archivo de inicialización en el contenedor
        #   subPath: mongo-init.js  # Indica que solo se debe montar ese archivo del ConfigMap
      volumes: # Declaración de volúmenes
      - name: mongo-data
        persistentVolumeClaim:
          claimName: pvc-db-mongo-server # hace referencia al nombre del del persistence volume client "pv-db-postgres-server"
      # - name: init-script
      #   configMap:
      #     name: mongo-init-config  # Nombre del ConfigMap que contiene el script de inicialización

# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/

# QUE ES UN DEPLOYMENT?
# - es un objeto de alto nivel que gestiona la implementación y el ciclo de vida de un conjunto de Pods en el clúster. 
# - su objetivo principal es garantizar que las aplicaciones se ejecuten continuamente y que siempre haya el número correcto de réplicas funcionando de forma estable.